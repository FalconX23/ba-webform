///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                         COSA_VOF.JS:  API URLs:  ENVIRONMENT: ON PREM / PROD                          //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

// UPDATED KDF API
const KDF_UPDATE_FILE = 'https://webapp9.sanantonio.gov/VOFJSscripts/Main/kdf_update_2025-09-05.js';

// Search Source on Map Search Widget: Park layer
const GIS_MAP_SERVER_0 = 'https://gis.sanantonio.gov/arcgis/rest/services/311/311_Search/MapServer/0';

// Search Source on Map Search Widget: Education Facilities layer
const GIS_MAP_SERVER_1 = 'https://gis.sanantonio.gov/arcgis/rest/services/311/311_Search/MapServer/1';

// Search Source on Map Search Widget: Non-CoSA Park layer
const GIS_MAP_SERVER_3 = 'https://gis.sanantonio.gov/arcgis/rest/services/311/311_Search/MapServer/3';
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                   IMPORTANT CONSTANTS FOR ALL FORMS                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////

const COSA_VOF_VERSION_NUMBER = '2.1.0';
const DEFAULT_TIMEOUT = 2000;

// FORM ADAPTOR PROCESSES
const PROC_REV_GEO_EXTRACT = 'verint_reverse_geo_extract';
const PROC_GET_PROP_DETAILS3 = 'cosa_get_full_property_details3';
const PROC_GET_PROP_DETAILS4 = 'cosa_get_full_property_details4';

// IMPORTANT VALUES FROM FORM ADAPTER PROCESS RESPONSES
const NOT_SAN_ANTONIO = '(non City)';
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////////
//      DO NOT TRIGGER JQUERY'S READY EVENT UNTIL WE HAVE FINISHED LOADING THE FOLLOWING KDF UPDATE      //
///////////////////////////////////////////////////////////////////////////////////////////////////////////
function loadHandlersAfterKDFInit() {
    setTimeout(() => {
        setUpClickHandlers();
        setDefaultKDFCustomError();
    }, DEFAULT_TIMEOUT);
}

function loadScriptFile(url, callback) {
    const script = document.createElement('script');
    script.src = url;
    script.onload = callback;
    document.head.appendChild(script);
}

function loadKDFUpdate() {
    if ($.holdReady) {
        $.holdReady(true);
        setTimeout(() => {
            loadScriptFile(KDF_UPDATE_FILE, () => {
                $.holdReady(false);
                console.log(`MSG TO DEV - KDF has been updated using ${KDF_UPDATE_FILE}`);
                loadHandlersAfterKDFInit();
            });
        }, DEFAULT_TIMEOUT);
    } else {
        console.log('MSG TO DEV - jQuery no longer supports "holdReady" which has been deprecated. You may need to modify loadKDFUpdate() in cosa_vof.js');
        console.log(`MSG TO DEV - KDF will use the default Verint API instead of the update in ${KDF_UPDATE_FILE}`);
        loadHandlersAfterKDFInit();
    }
}

console.log(`COSA VOF Resource Version: ${COSA_VOF_VERSION_NUMBER}`);
loadKDFUpdate();
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


// GLOBAL VARIABLES TO BE ADDED AT THE TOP OF THE SCRIPT
// dform_widget_button_but_do_search
var searchBox;
var map;
var mymap;
var mypositionLayer;
var mapReady;
var markerLayer;
var mapPinResponse;

// section for service area variables
var le_eventcode;
var proximity;
var maxReturn;
var zoom;
// end section for service area values
 
// used to hold best x,y coordinates be they pin or searched address etc
var bestXCoordinate;
var bestYCoordinate;
var search_street;
var search_addr_num;

// used when pulling back full search details
var propertyID;
var searchSource; //this is used as a prefix when loading fields from the full address details return and is either search_ or pin_
// end used when pulling back full search details
var oldPropId;
var newPropId;
var kdfName;
var locationKey;
var SOAPkey;
var SOAPstreet1;
var SOAPstreet2;
var SOAPaddressnumber;
var SOAPcity;
var SOAPzip;
var ReverseAddress;
var	ReverseStreet1;
var	ReverseStreet2;

// variable to ensure that header is only rendered once on page load.
var headerCount = 0;

var mapload = 0;
var searchEnter = 0;
var searchSelect = 0;
var pindrop = 0;
var valueRTA = 0;


// for map workings
var pinArray = [
    '/dformresources/content/map-gold.png',
    '/dformresources/content/GIS-PinDrop2-01.png',
    '/dformresources/content/GIS-PinDrop2-02.png',
    '/dformresources/content/GIS-PinDrop2-03.png',
    '/dformresources/content/GIS-PinDrop2-04.png',
    '/dformresources/content/GIS-PinDrop2-05.png',
    '/dformresources/content/map-mint.png',
    '/dformresources/content/map-arizonablue.png',
    '/dformresources/content/map-deeppurple.png',
    '/dformresources/content/map-red.png',
    '/dformresources/content/map-indianared.png',
    '/dformresources/content/map-salmon.png',
    '/dformresources/content/map-mandarin.png',
    '/dformresources/content/map-cerise.png',
    '/dformresources/content/map-beige.png',
    '/dformresources/content/map-bluegrey.png',
    '/dformresources/content/map-olivegreen.png',
    '/dformresources/content/map-pink.png',
    '/dformresources/content/map-mauve.png',
    '/dformresources/content/map-arizonablue.png',
    '/dformresources/content/map-lightgrey.png',
    '/dformresources/content/map-yellow.png',
    '/dformresources/content/map-orange.png',
    '/dformresources/content/map-darkblue.png',
    '/dformresources/content/map-grape.png'
];


// RETURNS ARRAY OF PROCESSES THAT GIVE IMPORTANT GEO INFORMATION AND PROPERTY DETAILS
function getGeoActions() {
    return [
        PROC_REV_GEO_EXTRACT,
        PROC_GET_PROP_DETAILS3,
        PROC_GET_PROP_DETAILS4
    ];
}

// FOR AN API ERROR ON ANY VALID ACTION, GO TO MAP PAGE WITH ERROR MESSAGE AND CLEAR PIN DETAILS
function handleWhenInvalidLocationData(action, locationPage = 'Location') {
    if (getGeoActions().includes(action)) {
        KDF.setVal('pin_details_reversegeo_display', '');
        KDF.gotoPage(locationPage, false, true, true);
        KDF.showError('There was a problem retrieving location data. Please try dropping a pin on the map again.');
    }
}

// CALLED FROM LocationKDFCustom(), FOR API RESPONSE ON ANY VALID ACTION, CHECKS locationkey OR da_locationkey
// AND IF VALUE IS NOT PRESENT, TRIGGER AN ERROR RESPONSE
function handleErrorIfMissingLocationKey(action, response, locationPage = 'Location') {
    if (getGeoActions().includes(action)) {
		let locationKey = '';
        if (action === PROC_REV_GEO_EXTRACT) {
            locationKey = response?.data?.locationkey;
        } else {
            locationKey = response?.data?.da_locationkey;
        }
        if (locationKey === undefined || locationKey === '') {
            handleWhenInvalidLocationData(action, locationPage);
        }
    }
}

// CALLED FROM LocationKDFCustom(), FOR API RESPONSE ON ANY VALID ACTION, CHECK PARK NAME
// AND IF NON CITY PARK IS SELECTED, GO TO MAP PAGE WITH ERROR MESSAGE AND CLEAR PIN DETAILS
function handleErrorIfNonCityParkSelected(action, response, locationPage = 'Location') {
    if ([ PROC_GET_PROP_DETAILS3, PROC_GET_PROP_DETAILS4 ].includes(action)) {
        const parkName = response?.data?.da_park_name;
        const isNonCityPark = parkName?.length > 0 ? parkName.includes(NOT_SAN_ANTONIO) : false;
        if (isNonCityPark) {
            KDF.setVal('pin_details_reversegeo_display', '');
            KDF.gotoPage(locationPage, false, true, true);
            KDF.showError('We are unable to create a case for a park not maintained by the City of San Antonio.');
        }
    }
}

// DEFAULT HANDLER FOR KDF CUSTOM ERRORS
// CAN BE INCLUDED IN VOF FORMS BY ADDING TO _KDF_customError HANDLER,
// OR LETTING THE setDefaultKDFCustomError() FUNCTION SET IT UP
function LocationKDFCustomErrors(action, locationPage = 'Location') {
    handleWhenInvalidLocationData(action, locationPage);
}

// SETS THE DEFAULT KDF CUSTOM ERROR HANDLER (_KDF_customError) ON ANY FORM THAT INCLUDES THIS SCRIPT
// FIRST CHECKS FOR EXISTANCE OF KDF CUSTOM ERROR HANDLER (_KDF_customError) ON VOF.
// IF VOF ALREADY CONTAINS _KDF_customError, THIS FUNCTION WILL NOT OVERRIDE.
// ANY VOF CAN OVERRIDE THIS DEFAULT HANDLER BY CREATING THEIR OWN _KDF_customError.
//      WHEN DOING SO, VOF HANDLER SHOULD PROBABLY INCLUDE:
//          LocationKDFCustomErrors(action);
//      IF THE FUNCTIONALITY WITHIN IS DESIRED, AND THEN ADD YOUR OWN FUNCTIONALITY.
let retriesForSetDefaultKDFCustomError = 0;
function setDefaultKDFCustomError() {
    const form = KDF.kdf();
    const formName = form ? form.name : '';
    if (formName.length > 0) {
        if ($._data) {
            const jQueryForm = $(`#dform_${formName}`);
            if (jQueryForm.length === 0) {
                if (retriesForSetDefaultKDFCustomError === 0) {
                    console.log(`MSG TO DEV - setDefaultKDFCustomError was not ready.  Retrying once more in ${DEFAULT_TIMEOUT} ms.`);
                    retriesForSetDefaultKDFCustomError += 1;
                    setTimeout(setDefaultKDFCustomError, DEFAULT_TIMEOUT);
                }
            } else {
                const events = $._data( jQueryForm[0], 'events');
                const customErrorHandlerExists = events && events['_KDF_customError'] ? events['_KDF_customError'].length > 0 : false;
                if (!customErrorHandlerExists) {
                    console.log('MSG TO DEV - _KDF_customError created by setDefaultKDFCustomError()');
                    $(`#dform_${formName}`).off('_KDF_customError').on('_KDF_customError', function(event, action, xhr, settings, thrownError) {
                        LocationKDFCustomErrors(action);
                    });
                } else {
                    console.log(`MSG TO DEV - _KDF_customError found in ${formName}. cosa_vof.js will not overwrite. Ensure you have all required functionality from setDefaultKDFCustomError()`);
                }
            }
        } else {
            console.log('MSG TO DEV - jQuery no longer supports "_data". You may need to modify setDefaultKDFCustomError() in cosa_vof.js');
        }
    }
}



// Add to KDF_custom event handler
function LocationKDFCustom(action, response) {
    if (action == 'verint_where_casefill_markers') {
        fillCaseMarkerPins(response);
    }

    // when RTA call is done, set returned object as property  
    if (action == 'prop-search') {
        console.log('==== inside property search') ;
        var propID = KDF.getVal('le_associated_obj_id');
        newPropId = propID.replace('NaN','');
        var ObjId = KDF.getVal('le_associated_obj_type');
        //ObjId = ObjId.replace('p','');
        //ObjId = ObjId.replace('i','');
        //ObjId = ObjId.replace('l','');
        console.log('obj id = ' + ObjId);
        console.log('prop id = ' + newPropId);
        if (newPropId !== oldPropId) {
            KDF.setVal('le_associated_obj_id', newPropId);
            KDF.setVal('le_associated_obj_type', ObjId);
            KDF.setPropertyID(newPropId, false, 'page_1');
            //KDF.setPropertyID(newPropId, true, 'page_1');
            oldPropId = newPropId;
        }

        valueRTA = valueRTA + 1;
        //KDF.customdata('v_update_parcel_street_cursor', 'End of prop-search 93', false, false, {});

        // if the locationkey is a parcel i.e. starts with a 'P' then fire the cleanup cursor
        var locationKeyFirstLetter = locationKey.substring(0, 1);
        if (locationKeyFirstLetter == 'P') {
            console.log('About to fire cleanup cursor');
            KDF.customdata('v_update_parcel_street_cursor', 'End of prop-search 93', false, false, {});
        }
        return valueRTA;
    } // end prop-search


    // verint_reverse_geo_extract ============================
    // when reversegeo fires from pin drop, the returned address is used for RTA and the returned locationkey is used to get gis attributes.
    if (action == 'verint_reverse_geo_extract') {
        console.log('prop has been retrieved for verint_reverse_geo_extract');
        console.log(response.data);
        console.log(response.data.addressnumber + ' '+ response.data.streetname);
        locationKey=response.data.locationkey;
        ReverseAddress = response.data.addressnumber;
        ReverseStreet1 = response.data.streetname;
        ReverseStreet2 = response.data.streetname2;
        console.log("Reverse Values = " + ReverseAddress + " " + ReverseStreet1 + " " + ReverseStreet2);

        if (locationKey == '') {
            KDF.showError('There has been a problem with the address entered. Please include St or Rd, etc.');
        }

        if (locationKey != '') {
            KDF.hideMessages();
            var pinFullAddress;

            if (locationKey.startsWith('A')) {
                console.log('location is an address');
                pinFullAddress = ReverseAddress + ' ' + ReverseStreet1 + ', ' + response.data.city + ', ' + response.data.zipcode;
                KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            }
            // If location is an intersection
            if (locationKey.startsWith('I')) {
                console.log('location is an intersection');
                pinFullAddress = ReverseStreet1 + ' & ' + ReverseStreet2 + ', ' + response.data.city + ', ' + response.data.zipcode;
                KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            }
            // If location is a street
            if (locationKey.startsWith('S')) {
                console.log('location is an street');
                pinFullAddress = ReverseAddress + ' ' + ReverseStreet1 + ', ' + response.data.city + ', ' + response.data.zipcode;
                KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            }
            // If location is a parcel
            if (locationKey.startsWith('P')) {
                console.log('location is an parcel');
                pinFullAddress = ReverseAddress + ' ' + ReverseStreet1 + ', ' + response.data.city + ', ' + response.data.zipcode;
                KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            }

            // If County Park clear pin so user cannot contniue
            console.log('checking if county park');
            console.log('clearing pin details');

        } // end if
    } // end verint_reverse_geo_extract

    // When full property details, location key is evaluated to determine what to display in pin address location
    if (action == 'cosa_get_full_property_details3') {
        console.log('inside cosa_get_full_property_details3');
        console.log(response.data);
        locationKey = response.data.da_locationkey;
        SOAPkey = response.data.da_locationkey;
        SOAPstreet1 = response.data.da_StName1;
        SOAPstreet2 = response.data.da_StName2;
        SOAPaddressnumber = response.data.da_StNo;
        SOAPcity = response.data.da_City;
        SOAPzip = response.data.da_Zipcode;

        var pinFullAddress;
        // If location is an address
        if (locationKey.startsWith('A')) {
            console.log('location is an address');
            pinFullAddress = response.data.da_StNo + ' ' + response.data.da_StName1 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
        }
        // If location is an intersection
        if (locationKey.startsWith('I')) {
            console.log('location is an intersection');
            pinFullAddress = response.data.da_StName1 + ' & ' + response.data.da_StName2 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
        }
        // If location is a street
        if (locationKey.startsWith('S')) {
            console.log('location is an street');
            pinFullAddress = response.data.da_StNo + ' ' + response.data.da_StName1 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);

        }
        // If location is a parcel
        if (locationKey.startsWith('P')) {
            console.log('location is an parcel');
            pinFullAddress = response.data.da_StNo + ' ' + response.data.da_StName1 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
        }
    } // end get full property details
  
    // When full property details, location key is evaluated to determine what to display in pin address location
    if (action == 'cosa_get_full_property_details4') {
        console.log(response.data);
        locationKey = response.data.da_locationkey;
        SOAPkey = response.data.da_locationkey;
        SOAPstreet1 = response.data.da_StName1;
        SOAPstreet2 = response.data.da_StName2;
        SOAPaddressnumber = response.data.da_StNo;
        SOAPcity = response.data.da_City;
        SOAPzip = response.data.da_Zipcode;

        var pinFullAddress;
        // If location is an address
        if (locationKey.startsWith('A')) {
            console.log('location is an address');
            pinFullAddress = response.data.da_StNo + ' ' + response.data.da_StName1 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            KDF.customdata('prop-search', 'get prop id', true, false, {
                "da_locationkey": response.data.da_locationkey,
                "addressnumber": response.data.da_StNo,
                "streetname": response.data.da_StName1
            });
        }
        // If location is an intersection
        if (locationKey.startsWith('I')) {
            console.log('location is an intersection');
            pinFullAddress = response.data.da_StName1 + ' & ' + response.data.da_StName2 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            KDF.customdata('prop-search', 'get prop id', true, false, {
                "da_locationkey":response.data.da_locationkey,
                "streetname":response.data.da_StName1,
                "streetname2":response.data.da_StName2
            });
        }
        // If location is a street
        if (locationKey.startsWith('S')) {
            console.log('location is an street');
            pinFullAddress = response.data.da_StNo + ' ' + response.data.da_StName1 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            KDF.customdata('prop-search', 'get prop id', true, false, {
                "da_locationkey":response.data.da_locationkey,
                "addressnumber":response.data.da_StNo,
                "streetname":response.data.da_StName1
            });
        }
        // If location is a parcel
        if (locationKey.startsWith('P')) {
            console.log('location is an parcel');
            pinFullAddress = response.data.da_StNo + ' ' + response.data.da_StName1 + ', ' + response.data.da_City + ', ' + response.data.da_Zipcode;
            KDF.setVal('pin_details_reversegeo_display', pinFullAddress);
            KDF.customdata('prop-search', 'get prop id', true, false, {
                "da_locationkey":response.data.da_locationkey,
                "addressnumber":response.data.da_StNo,
                "streetname":response.data.da_StName1
            });
        }
    } // end get full property details
    handleErrorIfMissingLocationKey(action, response);
    handleErrorIfNonCityParkSelected(action, response);
}

// Add to KDF_fieldChange
function LocationKDFFieldChanged(field) {
    // When a parkname field is changed, also change it in SR Details
    if (field.name == 'da_park_name') {
        if (KDF.getVal('da_park_name') == '' && KDF.getVal('txt_parkname') !== '') {
            KDF.setVal('txt_park_name', KDF.getVal('txt_parkname'));
        } else if (KDF.getVal('da_park_name') !== '' && KDF.getVal('txt_parkname') == '') {
            KDF.setVal('txt_parkname', field.value);
        }
    }
    // added EE
    if (field.name == 'le_gis_arcgis_search_input') {
        console.log ('SEARCH'); 
    }
    UpdateSLA(field);
}

function UpdateSLA(field) {
    if (field.name == 'txt_sla') {
        var updatesla = KDF.getVal('txt_sla');
        if (updatesla == '.125 Working Days') {
            KDF.setVal('txt_sla', '3 Hours');
        } else if (updatesla == '.125 Calendar Days') {
            KDF.setVal('txt_sla', '3 Hours');
        } else if (updatesla == '.08 Working Days') {
            KDF.setVal('txt_sla', '2 Hours');
        } else if (updatesla == '.08 Calendar Days') {
            KDF.setVal('txt_sla', '2 Hours');
        } else if (updatesla == '.04 Working Days') {
            KDF.setVal('txt_sla', '1 Hour');
        } else if (updatesla == '.04 Calendar Days') {
            KDF.setVal('txt_sla', '1 Hour');
        } else if (updatesla == '.5 Working Days') {
            KDF.setVal('txt_sla', '12 Hours');
        } else if (updatesla == '.5 Calendar Days') {
            KDF.setVal('txt_sla', '12 Hours');
        } else if (updatesla == '.13 Calendar Days') {
            KDF.setVal('txt_sla', '3 Hours');
        } else if (KDF.getVal('txt_sla') == 'N/A Working Days') {
            KDF.setVal('txt_sla', 'Not Applicable');
        } else if (KDF.getVal('txt_sla') == 'N/A Calendar Days') {
            KDF.setVal('txt_sla', 'Not Applicable');
        }
        //else {
        //	  KDF.setVal('txt_sla', updatesla + ' Days');
        //}
    }
    if (field.name == 'case_sla') {
        var updatecasesla = KDF.getVal('case_sla');
        if (KDF.getVal('case_sla') == '.125 Working Days') {
            KDF.setVal('case_sla', '3 Hours');
        } else if (KDF.getVal('case_sla') == '.125 Calendar Days') {
            KDF.setVal('case_sla', '3 Hours');
        } else if (updatecasesla == '.08 Working Days') {
            KDF.setVal('case_sla', '2 Hours');
        } else if (updatecasesla == '.08 Calendar Days') {
            KDF.setVal('case_sla', '2 Hours');
        } else if (updatecasesla == '.04 Working Days') {
            KDF.setVal('case_sla', '1 Hour');
        } else if (updatecasesla == '.04 Calendar Days') {
            KDF.setVal('case_sla', '1 Hour');
        } else if (updatecasesla == '.5 Working Days') {
            KDF.setVal('case_sla', '12 Hours');
        } else if (updatecasesla == '.5 Calendar Days') {
            KDF.setVal('case_sla', '12 Hours');
        } else if (updatecasesla == '.13 Calendar Days') {
            KDF.setVal('case_sla', '3 Hours');
        } else if (KDF.getVal('case_sla') == 'N/A Working Days') {
            KDF.setVal('case_sla', 'Not Applicable');
        } else if (KDF.getVal('case_sla') == 'N/A Calendar Days') {
            KDF.setVal('case_sla', 'Not Applicable');
        }
        //else {
        //  KDF.setVal('case_sla', updatecasesla + ' Days');
        //}
    }
}



// Add to KDF_ready
function LocationKDFReady() {
    // Add Header to page
    // if (headerCount < 1) {
        // addHeader();
        // headerCount++;
    // }

    hideShow();

    setAccess();

    $(document).on('click', '[role="menuitem"]', function () {
        var searchText=$(this).text();
        KDF.setVal('search_description', searchText);
        KDF.setVal('search_input_field_value', searchText);
        // searchSelect = searchSelect + 1;
        setTimeout(getMapInformation, 2500);
    }); // end on click addition

    if (KDF.getVal('da_locationkey') !== '') {
        console.log('da_location not null');
        var loadLocKey = KDF.getVal('da_locationkey');
        var loadAddrNum = KDF.getVal('addressnumber');
        var loadStrName = KDF.getVal('streetname');
        KDF.customdata('cosa_get_full_property_details3', 'get address details', true, true, {
            "locationkey": loadLocKey,
            "addressnum":loadAddrNum,
            "streetname":loadStrName
        });
        var pinY = KDF.getVal('ycoord');
        if (pinY !== '') {
            console.log('set pin location');
            var pinX = KDF.getVal('xcoord');
            setLocation(pinY,pinX);
        }

        // UNCOMMENTING FOLLOWING LINE WILL CAUSE FORM TO ALWAYS GO TO 2ND PAGE, IF LOCATION KEY IS ALREADY PRESENT (WHEN VIEWING FORM WITH EXISTING CASE).
        // IF DOING SO, THERE ARE SOME BUGS TO FIX, IN HANDLER _KDF_pageChange OF MANY VOFS
        // KDF.gotoNextPage();
    }

    $(document).on("submit", $("form"), function(event) { 
        console.log('form submitted');
        setTimeout(getMapInformation, 2500);
    });

    // CODE TO DISABLE PAGE NAV LINKS
    // $("#dform_pagenav").addClass("disablednav");
    $("#dform_pagenav").css({pointerEvents:"none"});
    console.log('made it to disable pointer');
    // END CODE TO DISABLE PAGE NAV LINKS

    // <!-- site improve code for analytics-->
    /*<![CDATA[*/
    (function() {
        var sz = document.createElement('script');
        sz.type = 'text/javascript';
        sz.async = true;
        sz.src = '//siteimproveanalytics.com/js/siteanalyze_15203350.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(sz, s);
    })();
    /*]]>*/
    // <!-- End site improve code -->
    //return searchSelect;
}



// Add to KDF_mapReady
function LocationKDFMapReady(map, positionLayer, markerLayer) {
    mymap = map;
    mypositionLayer = positionLayer;
    mapReady = true;
    markerLayer = markerLayer;
    mapload = mapload + 1;
    console.log('Map ready event fired');
    console.log('Map Ready TS = ' + $.now());

    $(".searchInput").on('keyup', function (e) {
        console.log('keyup entered e.keyCode is ' + e.keyCode);

        if (e.keyCode === 13) {
            console.log('enter key pressed');
            setTimeout(function() {
                getMapInformation();
            }, 800);
        }
    });
	
    var searchBtn = $('.searchBtn');
    console.log('searchBtn');
    console.log(searchBtn);
    searchBtn.click(function() {
        console.log('searchBtn click');
        setTimeout(function() {
            getMapInformation();
        }, 800);
    });
	
    $(document).on('click', '[role="menuitem"]', function () {
        var searchText = $(this).text();
        KDF.setVal('search_description', searchText);
        KDF.setVal('search_input_field_value', searchText);
        console.log('search option selected');
        console.log('option selected is ', searchText);
        var getsearchinput = searchText;
        console.log('getsearchinput = ' + getsearchinput);
        // added EE
        if (searchText.includes('non City')) { 
            var SearchBox = getsearchinput;
            console.log('inside search text check');
            console.log('searchBox = ' + searchBox);
            KDF.setVal('this.textContent', '');
            KDF.setVal('search_description', '');
        }

        setTimeout(getMapInformation, 1000);
    }); // end on click addition
    return mapload;
}


// Add to KDF_MapClicked
function LocationKDFMapClicked(pinMarker) {
    console.log(pinMarker);
    var geom = pinMarker.geometry;
    var pinX;
    var pinY;

    $.each(geom, function(key, value) {
        if (key == 'x') { // lon
            pinX = value;
            KDF.setVal('pin_x_dropped', pinX);
            KDF.setVal('pin_x_dropped_num', pinX);
            console.log('pin_x_dropped is being set with ' + pinX);
        }
        if (key == 'y') { // lat
            pinY = value;
            KDF.setVal('pin_y_dropped', pinY);
        }
    }); // end $each

    setPinData(pinY, pinX);
    setLocation(pinY, pinX);
} 
// Add functions at bottom of script page

// function fires when a search is done on the map
function getMapInformation() {
    console.log('getMapInformation', mymap);

    var layers = mymap.graphicsLayerIds;
    var graphicsLayer = mymap.getLayer(layers[1]);
    var graphicsPark = mymap.getLayer(layers[2]);
    var dmg_graphics = mymap.graphics.graphics.find(g => g.attributes !== undefined);
    var searchAddress;

    if (typeof final_search_input_field_value === "undefined") {
	    console.log('search result is UNDEFINED');
    } else {
	    console.log('search result is ' + final_search_input_field_value);
    }

    if (dmg_graphics) {
        var dmg_graphics_attr = dmg_graphics.attributes;
        var dmg_graphics_geometry = dmg_graphics.geometry;
        var graphics_x = dmg_graphics_geometry.x;
        var graphics_y = dmg_graphics_geometry.y;
        var search_match = dmg_graphics_attr.Match_addr;

        const searchResult = dmg_graphics_attr?.searchResult || '';
        if (!searchResult.includes(NOT_SAN_ANTONIO)) {
            KDF.hideMessages();
        }
        console.log('searchResult', searchResult);

        if (graphics_x && graphics_x.length > 0 && graphics_y && graphics_y.length > 0) {
            var graphics_x_local = graphics_x.toString();
            var graphics_y_local = graphics_y.toString();
            KDF.setVal('le_gis_lon', graphics_x_local);
            KDF.setVal('le_gis_lat', graphics_y_local);
        }

        console.log('search result is ' + dmg_graphics_attr.searchResult);
        console.log('graphic type is  ' + dmg_graphics_attr.Addr_type);

        // if map search returns a point of interest, validate its accompanying address.
        if (dmg_graphics_attr.Addr_type === 'POI' && dmg_graphics_attr.StAddr !== '') {
            KDF.setVal('txt_parkname', search_match);
            var numberAddr = dmg_graphics_attr.StAddr.split(' ');
            search_addr_num = numberAddr[0];
            search_street = numberAddr[1];
            for (var j = 2; j <= numberAddr.length -1; j++) {
                search_street += ' '+ numberAddr[j];
            }
            console.log('Pin address: ' + search_addr_num + ' ' + search_street);
        }

        // If map search returns address, validate address.
        if (dmg_graphics_attr.Addr_type === 'PointAddress' || dmg_graphics_attr.Addr_type === 'StreetAddress' || dmg_graphics_attr.Addr_type === 'StreetName') {
            var numberAddr = dmg_graphics_attr.searchResult.split(' ');
            search_addr_num = numberAddr[0];
            search_street = numberAddr[1];
            for (var k = 2; k <= numberAddr.length -1; k++) {
                search_street += ' ' + numberAddr[k];
            }
        }

        // If map search returns intersection, validate intersection.
        if (dmg_graphics_attr.Addr_type === 'StreetInt') {
            var intArr = dmg_graphics_attr.StAddr.split(' & ');
            var streetName = intArr[0];
            var streetName2 = intArr[1];
        }

        // capture coords from map search and store in hidden fields.
        var ESRICentreX = Number(graphics_x);
        var ESRICentreY = Number(graphics_y);
        var xcoordString = ESRICentreX + '';
        var ycoordString = ESRICentreY + '';
        KDF.setVal('search_x_coordinate_esri', ESRICentreX);
        KDF.setVal('xcoord', ESRICentreX);
        KDF.setVal('search_y_coordinate_esri', ESRICentreY);
        KDF.setVal('ycoord', ESRICentreY);
    } else {
        KDF.hideMessages();
    }
}// end function getMapInformation()

function getNearbyCases(buttonId) {
    console.log('clicked nearby');
    $('#dform_widget_button_but_nearby').on('click', function() {
        fireMapCaseFill();
    });   
 }

function setPinData(pinY, pinX) {
    pinY = '' + pinY;
    pinX = '' + pinX;
    var searchAddress;
    if (search_addr_num !== '') {
        searchAddress = search_addr_num + ' ' + search_street;
    }
    // Use pin drop coords to reverse geolocate
    console.log('setPinData has run and pin X= ' + pinX + ' and pinY= ' + pinY + 'searchAddress = ' + searchAddress);
    KDF.customdata('verint_reverse_geo_extract', 'mapclicked', true, true, {
        "latitude": pinY, 
        "longitude": pinX,
        "searchAddr": searchAddress
    });
}


function setLocation(pinY, pinX) {
    var lon = pinX;
    var lat = pinY
    console.log('setLocation: '+lon+','+lat);
    // mypositionLayer.clear(); // un-comment if you wish to retain the esri search marker

    require(
        ["esri/map", "esri/geometry/Point", "esri/symbols/SimpleMarkerSymbol", "esri/symbols/PictureMarkerSymbol", "esri/graphic",  "esri/layers/GraphicsLayer", "dojo/domReady!"],
        function(Map, Point, SimpleMarkerSymbol, PictureMarkerSymbol, Graphic, GraphicsLayer) {
            var point = new Point(lon, lat, new esri.SpatialReference({ wkid: 102740 }));
            // mymap.centerAt(point);
            mymap.centerAndZoom(point,8);
            var markerSymbol = new PictureMarkerSymbol('/dformresources/content/map-pin.png', 22, 40);
            // markerSymbol.setOffset(0, 1);
            var marker = new Graphic(point,markerSymbol);
            marker.setAttributes({"title":"TBA","description":"TBA"});
            // dm1 mypositionLayer.add(marker);     
        }
    );    
}

function getBestXY(){
    // bestXCoordinate;
    // there are several x,y's: Search location and pin location
    // (pin location is exactly where the customer thinks the issue is and is therefore the best to use as a centre of thecase marker pins)
    // There is a pin page with xy. If there are no values, then use the search x,y. If there are no values, then alertuser to select a location
    var xcoord = KDF.getVal('pin_x_dropped_num');
    var ycoord = KDF.getVal('pin_y_dropped');

    // if no pin, then try the esri search value
    if (xcoord =='') {
        xcoord = KDF.getVal('search_x_coordinate_esri');
        ycoord = KDF.getVal('search_y_coordinate_esri');
    }

    bestXCoordinate = xcoord;
    bestYCoordinate = ycoord;
}

function fireMapCaseFill() {
    // we have the eventcode but we need to have a suitable x,y
    getBestXY();

    var xcoord = bestXCoordinate;
    var ycoord = bestYCoordinate;
    console.log('best Y' + bestYCoordinate);
    console.log('best X' + bestXCoordinate);
    if (xcoord !='') {
        // with the coordinates set and the le_eventcode available, call the map casefill
        // change the coordinates to string for the process
        var xcoordString = '' + xcoord;
        var ycoordString = '' + ycoord;

        // strip off the training numbers after the decimal
        var whereIsDecimal = xcoordString.indexOf('.');
        xcoordString = xcoordString.substring(0, whereIsDecimal);
        whereIsDecimal = ycoordString.indexOf('.');
        ycoordString = ycoordString.substring(0, whereIsDecimal);
        le_eventcode = '99';

        var override_le_eventcode = ''; // by default, this process will return all eventcode types if this value is >=10
        if (le_eventcode == '99') {
            override_le_eventcode = '99';
            le_eventcode = '4500208'; // needs a default that is valid hence 4500208
        }

        // var proximity_in_feet = proximity; //default level set in workings
        var proximity_in_feet = '1000';
        var maximum_marker_return_results = '15';
        
        // var le_eventcode = '' + le_eventcode; // le_eventcode set by eventcode in workings
        var le_eventcode = '4500208'; // le_eventcode set by eventcode in workings

        KDF.customdata('verint_where_casefill_markers', 'fireCaseMapFillMarkers', true, true, {
            "le_eventcode": le_eventcode,
            "resultlimit": maximum_marker_return_results,
            "xcoord": xcoordString,
            "ycoord": ycoordString,
            "proximity_in_feet": proximity_in_feet,
            "override_le_eventcode": override_le_eventcode
        });

        KDF.customdata('verint_where_casefill_marker_table2', 'fireCaseMapFillMarkers', true, true, {
            "le_eventcode": le_eventcode,
            "resultlimit": maximum_marker_return_results,
            "xcoord": xcoordString,
            "ycoord": ycoordString,
            "proximity_in_feet": proximity_in_feet,
            "override_le_eventcode": override_le_eventcode  
        });
    } // end if (xcoord != '')
} // end fireMapCaseFill()

function fireMapCaseFill2(){
    // we have the eventcode but we need to have a suitable x,y
    getBestXY();

    var xcoord = bestXCoordinate;
    var ycoord = bestYCoordinate;
    console.log('best Y' + bestYCoordinate);
    console.log('best X' + bestXCoordinate);
    if (xcoord !='') {
        // with the coordinates set and the le_eventcode available, call the map casefill
        // change the coordinates to string for the process
        var xcoordString = '' + xcoord;
        var ycoordString = '' + ycoord;

        // strip off the training numbers after the decimal
        var whereIsDecimal = xcoordString.indexOf('.');
        xcoordString = xcoordString.substring(0, whereIsDecimal);
        whereIsDecimal = ycoordString.indexOf('.');
        ycoordString = ycoordString.substring(0, whereIsDecimal);
        le_eventcode = '99';

        var override_le_eventcode = ''; // by default, this process will return all eventcode types if this value is >=10
        if (le_eventcode == '99') {
            override_le_eventcode = '99';
            le_eventcode = '4500208'; // needs a default that is valid hence 4500208
        }

        // var proximity_in_feet = proximity; //default level set in workings
        var proximity_in_feet = '1000';
        var maximum_marker_return_results = '15';

        // var le_eventcode = '' + le_eventcode; // le_eventcode set by eventcode in workings
        var le_eventcode = '4500208'; // le_eventcode set by eventcode in workings

        KDF.customdata('verint_where_casefill_markers', 'fireCaseMapFillMarkers', true, true, {
            "le_eventcode": le_eventcode,
            "resultlimit": maximum_marker_return_results,
            "xcoord": xcoordString,
            "ycoord": ycoordString,
            "proximity_in_feet": proximity_in_feet,
            "override_le_eventcode": override_le_eventcode
        });

        KDF.customdata('verint_where_casefill_marker_table3', 'fireCaseMapFillMarkers', true, true, {
            "le_eventcode": le_eventcode,
            "resultlimit": maximum_marker_return_results,
            "xcoord": xcoordString,
            "ycoord": ycoordString,
            "proximity_in_feet": proximity_in_feet,
            "override_le_eventcode": override_le_eventcode  
        });
    } // end if (xcoord != '')
} // end fireMapCaseFill()

function fillCaseMarkerPins(response){
    // var lon = parseFloat(xcoord);
    // var lat = parseFloat(ycoord));
    // lon = 2114143;
    // lat = 13662361;
    var responseData=response.data;
    mypositionLayer.clear();

    // we need to set the zoom level and zoom according to the zoom prescribed by the service area
    // that means we also need the x,y
    getBestXY();

    var xcoord = bestXCoordinate;
    var ycoord = bestYCoordinate;

    // mymap.setLevel(KDF.getVal('zoom_level'));
    mymap.setLevel(6);

    console.log('responseData in fillCaseMarkerPins');
    console.log(responseData);
    var point;
    console.log('about to try to add pins and mymap= ');
    console.log(mymap);

    require(
        ["esri/map", "esri/geometry/Point", "esri/symbols/SimpleMarkerSymbol", "esri/symbols/PictureMarkerSymbol", "esri/graphic",  "esri/layers/GraphicsLayer", "dojo/domReady!"],
        function(mymap, Point, SimpleMarkerSymbol, PictureMarkerSymbol, Graphic, GraphicsLayer) {
            // there is a need to present different markers for different types of services,
            // especially if several different types are on the same map at one time
            // either there is one marker per service type or there is a general array of about 15 to choose from

            console.log('pinArray');
            console.log(pinArray);

            // need to determine how many different service types have come back. Mostly it will be one, but it could be that they want to see all different types for a given location
            var pinCounter = responseData.length;
            var serviceArray = [];
            var valueTitle;
            var valueDescription;
            var whereTargetString = 0;
            var whereInServiceArray = 0;
            $.each(responseData, function(key, value) {
                // if the value (the service) is not already in the array, add it

                valueTitle = value.title;
                whereTargetString = valueTitle.indexOf(' created ');
                valueTitle = valueTitle.substring(0, whereTargetString);
                if ($.inArray(valueTitle, serviceArray) == -1) {
                    serviceArray.push(valueTitle);
                }

                // pinCounter = pinCounter + 1;
            });

            console.log('serviceArray');

            // go through each data and build up the marker information
            $.each(responseData, function(key, value) {
                var markerinfo = this;
                console.log(value);
                console.log('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx markerinfo xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
                console.log(markerinfo);

                valueDescription=value.description;
                valueTitle=value.title;

                // find where in the service array this mar title resides
                var valueTitleForArray = value.title;
                whereTargetString = valueTitleForArray.indexOf(' created ');
                valueTitleForArray = valueTitleForArray.substring(0, whereTargetString);

                $.each(serviceArray, function(index, value) {
                    if (value == valueTitleForArray) {
                        whereInServiceArray = index;
                        return false; // return false to stop the loops
                    }
                });
                console.log('whereInServiceArray= ' + whereInServiceArray);
                console.log('valueDescription= ' + valueDescription);
                console.log('valueTitle= ' + valueTitle);

                var data_caseref;
                var br = valueDescription.indexOf('<br/>');
                data_caseref = valueDescription.substring(0, br);
                data_caseref = data_caseref.substring(5, br);

                var params = [
                'height=' + screen.height - 50,
                'width=' + screen.width - 50,
                // 'fullscreen=yes' 
                ].join(',');

                var caseref = data_caseref; // e.g. 'A17_777222-1014032824'
                // var link = 'http://crmndwap01:8080/lagan/uwa/case/view.html?caseref=' + caseref + '&status=1';
                // var pinURL = '<a class="caselink" target="_blank" href="'+link+'">Click here to view case</a>';
                // var caseWindow = window.open(link, "CaseDetails", params);
                // <a class="caselink" data-caseref="A17_762494-1013859637" data-intid="" >Click here if this is the same case</a>
                valueDescription = 'Ref: ' + data_caseref; // + '</br>' + pinURL;

                point = new Point(Number(markerinfo.longitude), Number(markerinfo.latitude), new esri.SpatialReference({ wkid: 102740 }));
                console.log('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx new point xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
                console.log(point);
                var markerSymbol = new PictureMarkerSymbol('/dformresources/content/GIS-PinDrop2-01.png', 25, 32);
                // var markerSymbol = new PictureMarkerSymbol(pinArray[whereInServiceArray], 22, 32);
                markerSymbol.setOffset(0, 16);
                var marker = new Graphic(point, markerSymbol);
                console.log('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx new marker xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
                console.log(marker);
                marker.setAttributes({"title": valueTitle, "description": valueDescription});
                console.log('in each marker loop');
                mypositionLayer.add(marker);
                console.log('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx myposition layer xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');
                console.log(mypositionLayer);
                console.log('xcoord=' + xcoord);

            }); // end for each
            var pointCenter = new Point(Number(xcoord), Number(ycoord), new esri.SpatialReference({ wkid: 102740 }));
            var centerMarkerSymbol = new PictureMarkerSymbol('/dformresources/content/GIS-PinDrop2-04.png', 25, 32);
            var centerMarker = new Graphic(pointCenter, centerMarkerSymbol);
            mypositionLayer.add(centerMarker);
        } // end function
    ); // end require
    // when filling markers, the table must also be filled
} // end fillCaseMarkerPins()


//BEGIN CUSTOMER PAGE CODE

function setUpClickHandlers() {
    $("#dform_widget_button_but_CreateShow").click(function() {
        console.log("Clicked Create Customer Hide Show");
        KDF.showSection('fldset_NewCust');
        KDF.showSection('butset_CreateBut');
        KDF.showWidget('bset_WTL34UK7');
        KDF.hideSection('area_0638UUJ9');
        KDF.hideSection('area_4PP0AXU1');
        clearfields();
        console.log("Cleared Peron Details main finished");
    });

    $("#dform_widget_button_but_CreateCust").click(function() {
        console.log("Clicked Cust Create");
        personCreate();         // good
        console.log('finish person creation');
        // setTimeout(personLOAD(),50500);
        // Loads newly created customer as objectID
    });

    $("#dform_widget_button_but_UpdateCust").click(function() {
        console.log("Clicked Cust Update");
        personUpdate();         // good
        var emailidcheck = KDF.getVal('txt_emailid');
        console.log(" \\\\\\\\\\\\\\\ email check = " + emailidcheck);
        var emailcheck = KDF.getVal('da_Email');
        var phoneidcheck = KDF.getVal('txt_phoneid');
        var phonecheck = KDF.getVal('da_DayPhoneNo');
        var phoneextcheck = KDF.getVal('da_DayPhoneExt');
        var phonealtidcheck = KDF.getVal('txt_altphoneid');
        var phonealtcheck = KDF.getVal('alternate_phnum');

        if (emailidcheck !== '' || emailcheck !== '') {
            console.log("made it in to update email");
            personUpdateEmail();
        } 
        if (phoneidcheck !== '' || phonecheck !== '' ) {
            console.log("made it in to update phone");
            personUpdatePhone();
            if (phoneextcheck !== '') {
                personUpdatePhoneExt();
            }
        }
        // Check to see if existing Alt ID phone is there to create new Alt or update existing alternate phone if Alt ID is present
        if (phonealtidcheck !== '' || phonealtcheck !== '') {
            console.log("made it in to update alt phone");
            personUpdateAltPhone();
        }
    });

    $("#dform_widget_button_but_makeAnon").click(function() {
        console.log("Clicked Anonymous");
        // Clears all the GUMB Client Info to not be sent
        clearfields();
        KDF.setCustomerID('', false, '');
        KDF.gotoNextPage();
    });

    $("#dform_widget_button_but_topnext").click(function() {
        console.log("Clicked Top Next Button for test");
    });
}

function clearfields() {
    console.log('clearing all fields');
    KDF.setVal('da_client_last', '');
    KDF.setVal('da_client_Name', '');
    KDF.setVal('da_client_house_number', '');
    KDF.setVal('da_client_stname', '');
    KDF.setVal('da_client_apt_suite', '');
    KDF.setVal('da_client_city', '');
    KDF.setVal('da_client_state', '');
    KDF.setVal('da_client_zipcode', '');
    KDF.setVal('txt_ObjID', '');
    KDF.setVal('txt_nameid', '');
    KDF.setVal('txt_addressid', '');
    KDF.setVal('da_Email', '');
    KDF.setVal('txt_emailid', '');
    KDF.setVal('da_DayPhoneNo', '');
    KDF.setVal('da_DayPhoneExt', '');
    KDF.setVal('txt_phoneid', '');
    KDF.setVal('txt_phonenum_ext_id', '');
    KDF.setVal('txt_altphoneid');
    KDF.setVal('alternate_phnum', '');
    console.log('finished clearing fields');
}

function clearnotiffields() {
    console.log('clearing all notification fields');
    KDF.setVal('txt_email_sub', '');
    KDF.setVal('txt_TCO1ENW9', '');
}

function personCreate() {
    var C_lname = KDF.getVal('txt_c_surname');
    var C_fname = KDF.getVal('txt_c_forename');
    var C_mname = KDF.getVal('txt_c_middle');
    var C_phone = KDF.getVal('tel_c_daytimephone');
    var C_altphone = KDF.getVal('tel_c_eveningphone');
    var C_email = KDF.getVal('txt_email');
    var C_housenum = KDF.getVal('txt_c_addressnumber');
    var C_streetname = KDF.getVal('txt_c_addressline1');
    var C_apt = KDF.getVal('txt_c_addressline3');
    var C_city = KDF.getVal('txt_c_city');
    var C_state = KDF.getVal('txt_c_statecode');
    var C_zip = KDF.getVal('txt_c_zipcode');

    console.log(
        'starting personCreate and parameters are: '
        + 'txt_c_surname' + C_lname
        + 'txt_c_middle ' + C_mname
        + 'txt_c_forename  ' + C_fname
        + 'tel_c_daytimephone  ' + C_phone
        + 'tel_c_eveningphone  ' + C_altphone
        + 'txt_email ' + C_email
        + 'txt_c_addressnumber  ' + C_housenum
        + 'txt_c_addressline1  ' + C_streetname
        + 'txt_c_addressline3  ' + C_apt
        + 'txt_c_city  ' + C_city
        + 'txt_c_statecode ' + C_state
        + 'txt_c_zipcode ' + C_zip
    );

    KDF.customdata('person-create', 'personCreate', true, true, {
        "txt_c_surname": C_lname,
        "txt_c_middle": C_mname,
        "txt_c_forename": C_fname,
        "tel_c_daytimephone": C_phone,
        "tel_c_eveningphone": C_altphone,
        "txt_email": C_email,
        "txt_c_addressnumber": C_housenum,
        "txt_c_addressline1": C_streetname,
        "txt_c_addressline3": C_apt,
        "txt_c_city": C_city,
        "txt_c_statecode": C_state,
        "txt_c_zipcode": C_zip
    });
} // end Person Create

function personLOAD() {
    var C_lname = KDF.getVal('txt_c_surname');
    var C_fname = KDF.getVal('txt_c_forename');
    var C_email = KDF.getVal('txt_email');
    var C_phone = KDF.getVal('tel_c_daytimephone');
    KDF.customdata('person-load', 'personload', true, true, {
        "forename": C_fname,
        "surname": C_lname,
        "email": C_email,
        "phone": C_phone
    });
}

function personUpdate() {
    var U_lname = KDF.getVal('da_client_last');
    var U_fname = KDF.getVal('da_client_Name');
    var U_housenum = KDF.getVal('da_client_house_number');
    var U_streetname = KDF.getVal('da_client_stname');
    var U_apt = KDF.getVal('da_client_apt_suite');
    var U_city = KDF.getVal('da_client_city');
    var U_state = KDF.getVal('da_client_state');
    var U_zip = KDF.getVal('da_client_zipcode');

    // IDS for updating info
    var U_objID = KDF.getVal('txt_ObjID');
    var U_nameID = KDF.getVal('txt_nameid');
    var U_addressID = KDF.getVal('txt_addressid');

    console.log(
        'starting personUpdate and parameters are: '
        + 'txt_surname' + U_lname
        + ' | txt_forename ' + U_fname
        + ' | txt_addressnumber  ' + U_housenum
        + ' | txt_addressline1 ' + U_streetname
        + ' | txt_addressline3  ' + U_apt
        + ' | txt_city  ' + U_city
        + ' | txt_statecode  ' + U_state
        + ' | txt_zipcode  ' + U_zip
        + '************************************'
        + ' | txt_ObjID ' + U_objID
        + ' | txt_nameid  ' + U_nameID
        + ' | txt_addressid  ' + U_addressID
    );

    KDF.customdata('person-update', 'personUpdate', true, true, {
        "txt_surname": U_lname,
        "txt_forename": U_fname,
        "txt_addressnumber": U_housenum,
        "txt_addressline1": U_streetname,
        "txt_addressline3": U_apt,
        "txt_city": U_city,
        "txt_statecode": U_state,
        "txt_zipcode": U_zip,
        "txt_nameid": U_nameID,
        "txt_addressid": U_addressID,
        "txt_ObjID": U_objID,
    });
    // KDF.setCustomerID(U_objID, true,true);
} // end Person Update


function personUpdateEmail() {
    var U_email = KDF.getVal('da_Email');
    // IDS for updating info
    var U_objID = KDF.getVal('txt_ObjID');
    var U_emailID = KDF.getVal('txt_emailid');

    console.log("value of email id = " + U_emailID);

    if (U_emailID !== '') {
        var U_emailstatus = 'Update';
    } else {
        var U_emailstatus = 'Insert';
    }

    console.log("value of email id = " + U_emailID);
    var U_emailID = KDF.getVal('txt_emailid');
    console.log("value of email id = " + U_emailID);

    console.log(
        'starting personUpdateEmail and parameters are: '
        + 'txt_emailAddress  ' + U_email
        + '************************************'
        + ' | txt_ObjID ' + U_objID
        + ' | txt_emailid  ' + U_emailID
        + ' | txt_emailstatus  ' + U_emailstatus
    );

    KDF.customdata('person-update-email', 'personUpdateEmail', true, true, {
        "txt_emailAddress": U_email,
        "txt_emailid": U_emailID,
        "txt_emailstatus": U_emailstatus,
        "txt_ObjID": U_objID
    });
} // end Person Update Email

function personUpdatePhone(){
    var U_phone = KDF.getVal('da_DayPhoneNo');
    var U_phoneext = KDF.getVal('da_DayPhoneExt');
    // IDS for updating info
    var U_objID = KDF.getVal('txt_ObjID');
    var U_phoneID = KDF.getVal('txt_phoneid');

    if (U_phoneID !== '') {
        var U_phonestatus = 'Update';
    } else {
        var U_phonestatus = 'Insert';
    }
    // var U_phoneID = KDF.getVal('txt_phoneid');
    console.log('starting personUpdatePhone and parameters are: '
        + 'txt_phonenum  ' + U_phone
        + '************************************'
        + ' | txt_ObjID ' + U_objID
        + ' | txt_phoneid  ' + U_phoneID
        + ' | txt_phonestatus  ' + U_phonestatus
        + ' | txt_phone_ext    ' + U_phoneext
    );

    KDF.customdata('person-update-phone', 'personUpdatePhone', true, true, {
        "txt_phonenum": U_phone,
        "txt_phoneid": U_phoneID,
        "txt_phonestatus": U_phonestatus,
        "txt_ObjID": U_objID,
        "txt_phone_ext": U_phoneext
    });
} // end Person Update Phone

function personUpdatePhoneExt() {
    var U_phone = KDF.getVal('da_DayPhoneNo');
    var U_phoneext = KDF.getVal('da_DayPhoneExt');
    // IDS for updating info
    var U_objID = KDF.getVal('txt_ObjID');
    var U_phoneID = KDF.getVal('txt_phoneid');

    // KDF.customdata('person-phoneid-ext', 'objectidset', true, true, {"partyid": U_objID, "phonenum": U_phone});

    var U_phone_extID = KDF.getVal('txt_phonenum_ext_id');
    console.log("what is value of field" + U_phone_extID);
    console.log("----------------------phone ext id : " + U_phone_extID);

    if ( U_phone_extID !== '') {
        console.log('existing phone id ');
    } else {
        U_phone_extID = '-1';
    }

    console.log('starting personUpdatePhoneEXT and parameters are: '
        + 'txt_phonenum  ' + U_phone
        + '************************************'
        + ' | txt_ObjID ' + U_objID
        + ' | txt_phonenum_ext_id  ' + U_phone_extID
        + ' | txt_phonenum_ext    ' + U_phoneext
    );

    KDF.customdata('person-update-phone-ext', 'personUpdatePhoneExt', true, true, {
        "txt_phonenum": U_phone,
        "txt_phonenum_ext_id": U_phone_extID,
        "txt_ObjID": U_objID,
        "txt_phonenum_ext": U_phoneext
    });
} // end Person Update Phone

function personUpdateAltPhone() {
    var U_altphone = KDF.getVal('alternate_phnum');
    // IDS for updating info
    var U_altobjID = KDF.getVal('txt_ObjID');
    var U_altphoneID = KDF.getVal('txt_altphoneid');

    if (U_altphoneID !== '') {
        var U_altphonestatus = 'Update';
    } else {
        var U_altphonestatus = 'Insert';
    }
    // var U_phoneID = KDF.getVal('txt_phoneid');
    console.log('starting personUpdatealtPhone and parameters are: '
        + 'txt_altphonenum  ' + U_altphone
        + '************************************'
        + ' | txt_altObjID ' + U_altobjID
        + ' | txt_altphoneid  ' + U_altphoneID
        + ' | txt_altphonestatus  ' + U_altphonestatus
    );

    KDF.customdata('person-update-phonealt', 'personUpdatePhoneAlt', true, true, {
        "txt_altphonenum": U_altphone,
        "txt_altphoneid": U_altphoneID,
        "txt_altphonestatus": U_altphonestatus,
        "txt_altObjID": U_altobjID
    });
} // end Person Update Alternate Phone


// END CUSTOMER PAGE CODE



// CODE FOR PAGE CHANGE

// this will be entered at a later time

// END OF CODE FOR PAGE CHANGE



// Function to populate dropdown list with all city departments.  Must name dropdown field 'sel_targetdept'
// and call function in KDF_ready
function getCOSADepartments() {
    KDF.customdata('cosa_departments', 'get COSA departments', true, false, {});
} // END GET COSA DEPARTMENTS FUNCTION

function getCOSADepartmentsTest() {
    KDF.customdata('ee_cosa_departments', 'get COSA departments', true, false, {});
} // END GET COSA DEPARTMENTS FUNCTION - TESTING ee01938

// function for sending emails from a form
function sendCOSAEmail(toAddress, fromAddress, subject, body) {
    KDF.customdata('cosa_email', 'email complaint/compliment recipients', false, false, {
        "toAddress": toAddress,
        "fromAddress": fromAddress,
        "emailSubject": subject,
        "emailBody": body
    });
} // END SEND COSA EMAIL


// Function to add a new case notification subscription
function createNewSubscription(kdf) {
    var caseID = kdf.saveresponse.caseid;
    var interactionID = kdf.saveresponse.interactionid;
    var emailAddress = KDF.getVal('txt_email_sub');
    console.log(kdf.customrequest.data.EMAIL);
    console.log(caseID + ', ' + interactionID + ', ' + emailAddress);
    var noteText = 'Notifications requested for ' + emailAddress;
    console.log(noteText);
    if (emailAddress !== '') {
        KDF.customdata('vof_subscribe', 'addnewsubscribe', true, true, {
            'CASEID': caseID,
            'EMAIL': emailAddress
        });
        // KDF.customdata('cosa_new_interaction_note', 'create new interaction note for subscription', false, false, {
        //     'interactionID': interactionID,
        //     'parentType': 1,
        //     'noteText': noteText
        // });  
    }

    // if the locationkey is a parcel i.e. starts with a 'P' then fire the cleanup cursor
    var locationKeyFirstLetter=locationKey.substring(0,1);
    if (locationKeyFirstLetter=='P') {
        console.log('About to fire cleanup cursor');
        KDF.customdata('v_update_parcel_street_cursor', 'kdf_save_event', false, false, {});
    }
	// KDF.customdata('v_update_parcel_street_cursor', 'update missing street name from parcel', false, true, {});
} // END CREATE NEW SUBSCRIPTION


// Adds header banner to top of form.
function addHeader() {
    console.log('ADD HEADER');

    $('body').prepend('<header role="banner" id="global-header"></header>');

    var header = $('#global-header');
    console.log('header= '+ header);
    var howMany = header.length;
    console.log('howMany= '+ howMany);

    header.append('<div id="vof_header">');
    $('#vof_header').append('<div class="vof_width clearafter vof_width_height">');
    $('.vof_width_height').append(
        '<div class="logo_style"><div class="site_logo"><div class="logoSubTitle"><a title="311 City Services & Info" href="https://www.sanantonio.gov/GetConnected/Services" target="_blank"><img src="https://www.sanantonio.gov/VOF_Font/311LogoVOFHeader.png" alt="311 City Services Logo"></a></div></div></div>' );

    setTimeout(function() {
        // Add HTML before a Div with a Class (Wait for left navigation id (#dform_navigation) to be rendered
        $( "#dform_pagenav" ).before( "<div id='dform_controls_leftnav'><a href='javascript:void(0);' id='dform_togglenav2'>Show/Hide</a></div>" );

        $( "#dform_togglenav2" ).click(function() {
            // $( "#dform_pagenav" ).toggle( "slow", function() {
            $( "#dform_pagenav, #dform_navigation" ).toggle();
            // $( "#dform_pageholder" ).toggleClass( "ten twelve" );
            // $( "#dform_pagenav:hidden" ).prev().children('#dform_pageholder').addClass('twelve');
            if ($( "#dform_pagenav" ).is(':hidden')) {
                $( "#dform_pageholder" ).addClass('twelve');
                $( "#dform_pageholder" ).removeClass('ten');
            } else {
                $( "#dform_pagenav" ).is(':visible');
                $( "#dform_pageholder" ).addClass('ten');
                $( "#dform_pageholder" ).removeClass('twelve');
            }
        });
    }, 300);
}

// function for hiding and showing elements on page load(KDF_ready)
function hideShow() {
    // hides html elements
    // $('#dform_pagenav_gis_attributes').css('display', 'none');
    // $('#dform_pagenav_workings').css('display', 'none');
    // $('.dform_section_area_72F24VJ5').css('display', 'none');
    $('#dform_control_buttons').css('display', 'none');
    // $('#dform_widget_button_but_nearby').css('display', 'none');
    $('#dform_progressbar').css('display', 'none');
    $('#dform_widget_addressnumber').css('display', 'none');
    $('#dform_widget_streetname').css('display', 'none');
}

// function for setting citizen, agent, or all access to certain elements in form on page load
function setAccess() {
    // sets elements to agent access only.  
    // $('#dform_pagenav_workings').attr('data-access', 'agent');
    // $('#dform_pagenav_subscribe').attr('data-access', 'agent');
    // $('#dform_pagenav_gis_attributes').attr('data-access', 'agent');
    $('#dform_widget_txt_email_sub').removeAttr('data-matches');
    // $('#dform_widget_txt_txt_TCO1ENW9').removeAttr('data-matches');
    $('#dform_widget_txt_email_sub').prop('required', false);
    $('#dform_widget_txt_txt_TCO1ENW9').prop('required', false);
    // $('#dform_widget_search_input_field_value').prop("readonly", true);
    // $('#dform_widget_pin_details_reversegeo_display').prop("readonly", true);
}
